!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var s=e();for(var i in s)("object"==typeof exports?exports:t)[i]=s[i]}}(window,(function(){return function(t){var e={};function s(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,s),o.l=!0,o.exports}return s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(i,o,function(e){return t[e]}.bind(null,o));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e),s.d(e,"Minefield",(function(){return i}));var i={};s.r(i),s.d(i,"getInstance",(function(){return v})),s.d(i,"DEFAULTS",(function(){return E})),s.d(i,"CHECKER",(function(){return M})),s.d(i,"STATUS",(function(){return m})),s.d(i,"EVENTS",(function(){return N})),s.d(i,"default",(function(){return S}));const o={debug:!1},n=t=>({cols:t,rows:t,mines:t}),r={EASY:{...o,...n(10)},MEDIUM:{...o,...n(15)},HARD:{...o,...n(30)}},a={ALL:"all",START:"start",NEXT_TURN:"nextTurn",FINISH:"finish"},u={LOSS:"LOSS",PLAYING:"PLAYING",WIN:"WIN"},h={EMPTY:"",FLAG:"F",MINE:-1,NUMBER_0:0,NUMBER_1:2,NUMBER_2:3,NUMBER_3:3,NUMBER_4:4,NUMBER_5:5,NUMBER_6:6,NUMBER_7:7,NUMBER_8:8};var d=class{constructor(){this.observer=[]}on(t,e){return this.addEvent(t),this.observer[t].push(e),this}emit(t,e){this.addEvent(t),this.observer[t].forEach(t=>t(e))}addEvent(t){void 0===this.observer[t]&&(this.observer[t]=[])}};var l={updateValue:function(t,e,s){this.state.setValue(t,e,s),this.state.get("updated").push({row:t,col:e,value:s}),-1===[h.EMPTY,h.FLAG,h.MINE].indexOf(s)&&this.state.set("checked",this.state.get("checked")+1)},openAll:function(){const t=this.state.get("board");t.map((e,s)=>e.map((e,i)=>{t[s][i]=this.board[s][i]})),this.state.set("board",t)},open:function(t,e){if(!this.state.isFinish()){if(this.state.set("updated",[]),this.state.getValue(t,e)===h.EMPTY){const s=this.board[t][e];this.updateValue(t,e,s),0===s&&this.expand(t,e)}this.nextTurn()}},flag:function(t,e){if(this.state.isFinish())return;this.state.set("updated",[]);const s=this.state.getValue(t,e);[h.FLAG,h.EMPTY].indexOf(s)>-1&&this.updateValue(t,e,s===h.FLAG?h.EMPTY:h.FLAG),this.nextTurn()},expand:function(t,e){for(let s=t-1;s<=t+1;s++)for(let t=e-1;t<=e+1;t++)void 0!==this.board[s]&&void 0!==this.board[s][t]&&this.board[s][t]>=h.NUMBER_0&&this.board[s][t]<=h.NUMBER_8&&this.state.get("board")[s][t]===h.EMPTY&&(this.updateValue(s,t,this.board[s][t]),this.board[s][t]===h.NUMBER_0&&this.expand(s,t))}};class c{constructor(t){this.options=t}make(){return this.makeBoard(),this.makeMines(),this.data}makeBoard(){this.data=Array(this.options.rows).fill(null).map(()=>Array(this.options.cols).fill(null).map(()=>0))}makeMines(){let t=0,e="";do{const s=this.getRandomMap(),i=s.join(",")+"|";-1===e.indexOf(i)&&(this.data[s[0]][s[1]]=h.MINE,this.fillAround(s),e+=i,t++)}while(t<this.options.mines)}fillAround(t){for(let e=t[0]-1;e<=t[0]+1;e++)for(let s=t[1]-1;s<=t[1]+1;s++)void 0!==this.data[e]&&void 0!==this.data[e][s]&&this.data[e][s]>-1&&this.data[e][s]++}getRandomMap(){const t=t=>Math.floor(Math.random()*t);return[t(this.options.rows),t(this.options.cols)]}}c.make=t=>new c(t).make();var f=c;var p=class{constructor(t,e){this.options=t,this.board=e,this.init()}init(){this.state={rows:this.options.rows,cols:this.options.cols,total:this.options.cols*this.options.rows-this.options.mines,status:u.PLAYING,checked:0,updated:[],board:Array(this.options.rows).fill(null).map(()=>Array(this.options.cols).fill(null).map(()=>""))}}get(t){return t?this.state[t]:this.state}set(t,e){this.state[t]=e}getValue(t,e){return this.state.board[t][e]}setValue(t,e,s){this.state.board[t][e]=s}isWin(){return this.get("status")===u.WIN}isLoss(){return this.get("status")===u.LOSS}isFinish(){return this.isWin()||this.isLoss()}};class b{constructor(t){this.options={...t},this.observer=new d}addListener(t,e){this.observer.on(t,e)}emit(t){this.observer.emit(t,this.getState()),this.observer.emit(a.ALL,{event:t,state:this.getState()})}start(){return this.board=f.make(this.options),this.state=new p(this.options,this.board),this.emit(a.START),this}getState(){const t=this.state.get();return this.options.debug&&(t.debug={board:this.board}),t}nextTurn(){switch(this.updateStatus(),this.state.get("status")){case u.PLAYING:this.emit(a.NEXT_TURN);break;case u.LOSS:case u.WIN:this.openAll(),this.emit(a.FINISH)}}updateStatus(){0!==this.state.get("updated").length&&this.state.set("status",this.state.get("updated")[0].value===h.MINE?u.LOSS:this.state.get("checked")===this.state.get("total")?u.WIN:u.PLAYING)}}Object.keys(l).forEach(t=>{b.prototype[t]=l[t]});var g=b;function v(t=r.MEDIUM){const e=new g(t),s={addListener:(t,i)=>(e.addListener(t,i),s),start:()=>e.start(),open:(t,s)=>e.open(t,s),flag:(t,s)=>e.flag(t,s),getState:()=>e.getState(),reset:()=>e.start()};return s}const E=r,M=h,m=u,N=a;var S={getInstance:v}}])}));
//# sourceMappingURL=minefield.min.js.map